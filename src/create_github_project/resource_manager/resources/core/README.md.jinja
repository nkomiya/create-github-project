# {{ repo_name }}

## リポジトリ運用規則

### ブランチ戦略

|ブランチ名|用途|
|:--|:--|
|{{ production_branch }}|リリース用 ブランチ。develop ブランチからの merge により更新する。|
|develop|開発用ブランチ。トピックブランチからの PR で更新する。|
|`${type}/${summary}`|トピックブランチ。作業者が開発を行うために利用する。|

- 補足

    - `${type}` は変更種別で、下記のいずれかを利用する。

        |名前|説明|
        |:--|:--|
        |feat|機能追加|
        |fix|バグ修正|
        |test|テストの追加・修正|
        |style|コーディングスタイルの修正|
        |refactor|リファクタリング|
        |docs|ドキュメントの追加・修正|
        |perf|パフォーマンス改善|
        |revert|先行 PR を打ち消す修正|
        |chore|その他雑多な変更|

    - `${summary}` は変更内容が分かるような名前。

### リリース契機

|環境|リリース契機|
|:--|:--|
|開発環境|develop ブランチへの push|
|ステージング環境|{{ production_branch }} ブランチへの push|
|本番環境|タグ `vX.Y.Z` の push|

### 開発フロー

1. GitHub 上で変更を加える旨の Issue を立てる。
2. develop ブランチからトピックブランチ `${type}/${summary}` を作成する。
3. トピックブランチで開発作業を行う。
    - レビュアーの負担を軽減するため、コミットの粒度を検討すること。
    - コミットメッセージの形式は不問 (squash merge を利用するため)。
4. 所定の **GCP プロジェクト** にて動作確認を行う。
5. PR を作成する。指定すべき項目は下記。
    - PR のタイトル
        - `${type}: ${commit_message}`
            - `${type}` : 手順2で指定した変更種別
            - `${commit_message}` : PR が merge される際に利用されるべきコミットメッセージ
        - 補足
            - 本リポジトリでは、コミットメッセージの形式として [conventional commits](https://www.conventionalcommits.org/ja/) を採用する。
    - レビュアー
        - xxx
6. レビューが完了したら、リポジトリ管理者が merge する。
    - merge 方法　：　**Squash and merge**
7. デプロイ先の環境で動作確認を行い、問題がなければ完了。

### リリースフロー

#### ステージング環境

ステージング環境へのリリースの契機となる、{{ production_branch }} ブランチの更新方法は下記の通り。

1. 作業者が develop ➔ {{ production_branch }} に PR を作成。
    - レビュアー
        - xxx
1. レビューが完了したら、リポジトリ管理者が merge する。
    - merge 方法　：　**Create a merge commit**
    - コミットメッセージの形式は不問
1. 作業者がデプロイ結果の確認を行い、問題がなければ完了。

#### 本番環境

本番環境へのリリースの契機となる、タグの push 方法は下記の通り。

1. 作業者が GitHub の Actions タブから適切な workflow を起動する。
    - workflow

        |リリース方式|workflow 名|
        |:--|:--|
        |パッチ|patch-release-request|
        |マイナー|minor-release-request|
        |メジャー|major-release-request|

    - ブランチ ： {{ production_branch }}

1. 作業者が、手順1により作成された PR にてレビュアーを指定する。
    - レビュアー
        - xxx
1. レビューが完了したら、リポジトリ管理者は merge を行った後、release ブランチを削除する。
    - merge 方法　：　**Squash and merge**
1. 作業者がデプロイ結果の確認を行い、問題がなければ完了。

## ディレクトリ構成

<!-- TODO: 記載 -->
