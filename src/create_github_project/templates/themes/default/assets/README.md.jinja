# {{ repo_name }}

## リポジトリ運用規則

### ブランチ戦略

|ブランチ名|用途|
|:--|:--|
|{{ production_branch }}|リリース用 ブランチ。develop ブランチからの merge により更新する。|
|develop|開発用ブランチ。トピックブランチからの PR で更新する。|
|`${type}/${summary}`|トピックブランチ。作業者が開発を行うために利用する。|

- 補足

    - `${type}` は変更種別で、下記のいずれかを利用する。

        |名前|説明|
        |:--|:--|
        |feat|機能追加|
        |fix|バグ修正|
        |test|テストの追加・修正|
        |style|コーディングスタイルの修正|
        |refactor|リファクタリング|
        |docs|ドキュメントの追加・修正|
        |perf|パフォーマンス改善|
        |revert|先行 PR を打ち消す修正|
        |chore|その他雑多な変更|

    - `${summary}` は変更内容が分かるような名前。

### リリース契機

|環境|リリース契機|
|:--|:--|
|開発環境|develop ブランチへの push|
|ステージング環境|{{ production_branch }} ブランチへの push|
|本番環境|タグ `vX.Y.Z` の push|

### 開発フロー

1. GitHub 上で変更を加える旨の Issue を立てる。
2. develop ブランチからトピックブランチ `${type}/${summary}` を作成する。
3. トピックブランチで開発作業を行う。
    - レビュアーの負担を軽減するため、コミットの粒度を検討すること。
    - コミットメッセージの形式は不問 (squash merge を利用するため)。
4. 所定の環境にて動作確認を行う。
5. PR を作成する。指定すべき項目は下記。
    - PR のタイトル
        - `${type}: ${commit_message}`
            - `${type}` : 手順2で指定した変更種別
            - `${commit_message}` : PR が merge される際に利用されるべきコミットメッセージ
        - 補足
            - 本リポジトリでは、コミットメッセージの形式として [conventional commits](https://www.conventionalcommits.org/ja/) を採用する。
    {%- if inputs.code_reviewers %}
        - レビュアー
        {%- for account_id, info in inputs.code_reviewers.items() %}
            - {{ account_id }} ({{ info['display_name'] }})
        {%- endfor -%}
    {%- else %}
        - レビュアー
            - TODO: 適切なコードレビュアーを指定する
    {%- endif %}
6. レビューが完了したら、リポジトリ管理者が merge する。
    - merge 方法　：　**Squash and merge**
7. デプロイ先の環境で動作確認を行い、問題がなければ完了。

### リリースフロー

#### ステージング環境

ステージング環境へのリリースの契機となる、{{ production_branch }} ブランチの更新方法は下記の通り。

1. 作業者が develop ➔ {{ production_branch }} に PR を作成。
{%- if reviewers %}
    - レビュアー (自動指定)
    {%- for account_id, info in reviewers.items() %}
        - {{ account_id }} ({{ info['display_name'] }})
    {%- endfor -%}
{%- else %}
    - レビュアー
        - TODO: 適切なリリースのレビュアーを指定する
{%- endif %}
1. レビューが完了したら、リポジトリ管理者が merge する。
    - merge 方法　：　**Create a merge commit**
    - コミットメッセージの形式は不問
1. 作業者がデプロイ結果の確認を行い、問題がなければ完了。

#### 本番環境

本番環境へのリリースの契機となる、タグの push 方法は下記の通り。

1. 作業者が GitHub の Actions タブから適切な workflow を起動する。
    - workflow

        |リリース方式|workflow 名|
        |:--|:--|
        |パッチ|patch-release-request|
        |マイナー|minor-release-request|
        |メジャー|major-release-request|

    - ブランチ ： {{ production_branch }}
1. 作業者は PR が作成されたことを確認した後、リリースのレビューを依頼する。
{%- if reviewers %}
    - レビュアー (自動指定)
    {%- for account_id, info in reviewers.items() %}
        - {{ account_id }} ({{ info['display_name'] }})
    {%- endfor -%}
{%- else %}
    - レビュアー
        - TODO: 適切なリリースのレビュアーを指定する
{%- endif %}
1. レビューが完了したら、リポジトリ管理者が merge を行った後、release ブランチを削除する。
    - merge 方法　：　**Squash and merge**
1. 作業者がデプロイ結果の確認を行い、問題がなければ完了。

#### レビュアーの変更

本番環境へのリリース時のレビュアーは GitHub Actions によって自動指定される。
これを変更するには、各 workflow の最終ステップにて、with.reviewers を変更する。

変更対象のファイルは下記3つ。

|リリース形式|対象ファイル|
|:--|:--|
|major|[major-release-request.yml](./.github/workflows/major-release-request.yml)|
|minor|[minor-release-request.yml](./.github/workflows/minor-release-request.yml)|
|patch|[patch-release-request.yml](./.github/workflows/patch-release-request.yml)|

- 参考
    - [create-pull-request](https://github.com/marketplace/actions/create-pull-request)

## ローカル開発環境のセットアップ

1. [VS Code](https://code.visualstudio.com/) をインストールする。
1. **Settings** から、保存時のコード整形 (format on save) を有効化する。

    ![format_on_save](https://user-images.githubusercontent.com/49669363/126272780-d67648fe-1e72-42aa-939b-16d1dc6e197f.png)

{%- if inputs.languages %}

1. 下記リンク先のドキュメントに従い、言語ごとの設定を行う。
{% for lang in inputs.languages %}
    - [{{ lang.capitalize() }}](./docs/setup/{{ lang }}.md)
{%- endfor %}
{%- endif %}

## ディレクトリ構成

<!-- TODO: 記載 -->
